#!/bin/bash

# Test script for School Registry system

echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏ School Registry..."
echo "======================================="

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Wait for services to be ready
echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤ (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

# Test PostgreSQL
echo -n "1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PostgreSQL... "
if docker-compose exec -T postgres pg_isready -U user -d schooldb &>/dev/null; then
    echo -e "${GREEN}‚úÖ –ì–æ—Ç–æ–≤–∏–π${NC}"
    POSTGRES_OK=true
else
    echo -e "${RED}‚ùå –ù–µ –≥–æ—Ç–æ–≤–∏–π${NC}"
    POSTGRES_OK=false
fi

# Test Backend Health
echo -n "2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Backend Health... "
if curl -s http://localhost:8080/actuator/health | grep -q "UP"; then
    echo -e "${GREEN}‚úÖ –ì–æ—Ç–æ–≤–∏–π${NC}"
    BACKEND_OK=true
else
    echo -e "${RED}‚ùå –ù–µ –≥–æ—Ç–æ–≤–∏–π${NC}"
    BACKEND_OK=false
fi

# Test Backend API
echo -n "3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Backend API... "
if curl -s http://localhost:8080/api/schools/all | grep -q '\['; then
    echo -e "${GREEN}‚úÖ API –ø–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ${NC}"
    API_OK=true
else
    echo -e "${RED}‚ùå API –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ${NC}"
    API_OK=false
fi

# Test Frontend
echo -n "4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Frontend... "
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/)
if [ "$HTTP_CODE" = "200" ]; then
    echo -e "${GREEN}‚úÖ –ì–æ—Ç–æ–≤–∏–π (HTTP $HTTP_CODE)${NC}"
    FRONTEND_OK=true
else
    echo -e "${RED}‚ùå –ù–µ –≥–æ—Ç–æ–≤–∏–π (HTTP $HTTP_CODE)${NC}"
    FRONTEND_OK=false
fi

# Test Swagger UI
echo -n "5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Swagger UI... "
SWAGGER_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/swagger-ui/index.html)
if [ "$SWAGGER_CODE" = "200" ]; then
    echo -e "${GREEN}‚úÖ –î–æ—Å—Ç—É–ø–Ω–∏–π (HTTP $SWAGGER_CODE)${NC}"
    SWAGGER_OK=true
else
    echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (HTTP $SWAGGER_CODE)${NC}"
    SWAGGER_OK=false
fi

echo ""
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"
echo "========================="

if [ "$POSTGRES_OK" = true ] && [ "$BACKEND_OK" = true ] && [ "$API_OK" = true ] && [ "$FRONTEND_OK" = true ] && [ "$SWAGGER_OK" = true ]; then
    echo -e "${GREEN}üéâ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!${NC}"
    echo ""
    echo "üåê –î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:"
    echo "‚Ä¢ Frontend: http://localhost:3000"
    echo "‚Ä¢ Backend API: http://localhost:8080"
    echo "‚Ä¢ Swagger UI: http://localhost:8080/swagger-ui/index.html"
    echo "‚Ä¢ Health Check: http://localhost:8080/actuator/health"
    echo ""
    echo "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:"
    echo "‚Ä¢ Host: localhost:5432"
    echo "‚Ä¢ Database: schooldb"
    echo "‚Ä¢ User: user"
    echo "‚Ä¢ Password: pass"
    exit 0
else
    echo -e "${RED}‚ùå –î–µ—è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ${NC}"
    echo ""
    echo -e "${YELLOW}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:${NC}"
    echo "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏: docker-compose logs"
    echo "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å: docker-compose down && docker-compose up --build"
    echo "‚Ä¢ –û—á–∏—Å—Ç—ñ—Ç—å volumes: docker-compose down -v && docker-compose up --build"
    exit 1
fi 
 

# Test script for School Registry system

echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏ School Registry..."
echo "======================================="

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Wait for services to be ready
echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤ (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

# Test PostgreSQL
echo -n "1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PostgreSQL... "
if docker-compose exec -T postgres pg_isready -U user -d schooldb &>/dev/null; then
    echo -e "${GREEN}‚úÖ –ì–æ—Ç–æ–≤–∏–π${NC}"
    POSTGRES_OK=true
else
    echo -e "${RED}‚ùå –ù–µ –≥–æ—Ç–æ–≤–∏–π${NC}"
    POSTGRES_OK=false
fi

# Test Backend Health
echo -n "2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Backend Health... "
if curl -s http://localhost:8080/actuator/health | grep -q "UP"; then
    echo -e "${GREEN}‚úÖ –ì–æ—Ç–æ–≤–∏–π${NC}"
    BACKEND_OK=true
else
    echo -e "${RED}‚ùå –ù–µ –≥–æ—Ç–æ–≤–∏–π${NC}"
    BACKEND_OK=false
fi

# Test Backend API
echo -n "3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Backend API... "
if curl -s http://localhost:8080/api/schools/all | grep -q '\['; then
    echo -e "${GREEN}‚úÖ API –ø–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ${NC}"
    API_OK=true
else
    echo -e "${RED}‚ùå API –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ${NC}"
    API_OK=false
fi

# Test Frontend
echo -n "4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Frontend... "
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/)
if [ "$HTTP_CODE" = "200" ]; then
    echo -e "${GREEN}‚úÖ –ì–æ—Ç–æ–≤–∏–π (HTTP $HTTP_CODE)${NC}"
    FRONTEND_OK=true
else
    echo -e "${RED}‚ùå –ù–µ –≥–æ—Ç–æ–≤–∏–π (HTTP $HTTP_CODE)${NC}"
    FRONTEND_OK=false
fi

# Test Swagger UI
echo -n "5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Swagger UI... "
SWAGGER_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/swagger-ui/index.html)
if [ "$SWAGGER_CODE" = "200" ]; then
    echo -e "${GREEN}‚úÖ –î–æ—Å—Ç—É–ø–Ω–∏–π (HTTP $SWAGGER_CODE)${NC}"
    SWAGGER_OK=true
else
    echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (HTTP $SWAGGER_CODE)${NC}"
    SWAGGER_OK=false
fi

echo ""
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"
echo "========================="

if [ "$POSTGRES_OK" = true ] && [ "$BACKEND_OK" = true ] && [ "$API_OK" = true ] && [ "$FRONTEND_OK" = true ] && [ "$SWAGGER_OK" = true ]; then
    echo -e "${GREEN}üéâ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!${NC}"
    echo ""
    echo "üåê –î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:"
    echo "‚Ä¢ Frontend: http://localhost:3000"
    echo "‚Ä¢ Backend API: http://localhost:8080"
    echo "‚Ä¢ Swagger UI: http://localhost:8080/swagger-ui/index.html"
    echo "‚Ä¢ Health Check: http://localhost:8080/actuator/health"
    echo ""
    echo "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:"
    echo "‚Ä¢ Host: localhost:5432"
    echo "‚Ä¢ Database: schooldb"
    echo "‚Ä¢ User: user"
    echo "‚Ä¢ Password: pass"
    exit 0
else
    echo -e "${RED}‚ùå –î–µ—è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ${NC}"
    echo ""
    echo -e "${YELLOW}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:${NC}"
    echo "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏: docker-compose logs"
    echo "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å: docker-compose down && docker-compose up --build"
    echo "‚Ä¢ –û—á–∏—Å—Ç—ñ—Ç—å volumes: docker-compose down -v && docker-compose up --build"
    exit 1
fi 